// Code generated by mockery v2.46.0. DO NOT EDIT.

package messagesmocks

import (
	quicklog "github.com/a-novel-kit/quicklog"
	mock "github.com/stretchr/testify/mock"
)

// MockLoader is an autogenerated mock type for the Loader type
type MockLoader struct {
	mock.Mock
}

type MockLoader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLoader) EXPECT() *MockLoader_Expecter {
	return &MockLoader_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockLoader) Close() {
	_m.Called()
}

// MockLoader_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockLoader_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockLoader_Expecter) Close() *MockLoader_Close_Call {
	return &MockLoader_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockLoader_Close_Call) Run(run func()) *MockLoader_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLoader_Close_Call) Return() *MockLoader_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLoader_Close_Call) RunAndReturn(run func()) *MockLoader_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Error provides a mock function with given fields: err
func (_m *MockLoader) Error(err error) {
	_m.Called(err)
}

// MockLoader_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type MockLoader_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - err error
func (_e *MockLoader_Expecter) Error(err interface{}) *MockLoader_Error_Call {
	return &MockLoader_Error_Call{Call: _e.mock.On("Error", err)}
}

func (_c *MockLoader_Error_Call) Run(run func(err error)) *MockLoader_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *MockLoader_Error_Call) Return() *MockLoader_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLoader_Error_Call) RunAndReturn(run func(error)) *MockLoader_Error_Call {
	_c.Call.Return(run)
	return _c
}

// Nest provides a mock function with given fields: message
func (_m *MockLoader) Nest(message quicklog.Message) {
	_m.Called(message)
}

// MockLoader_Nest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Nest'
type MockLoader_Nest_Call struct {
	*mock.Call
}

// Nest is a helper method to define mock.On call
//   - message quicklog.Message
func (_e *MockLoader_Expecter) Nest(message interface{}) *MockLoader_Nest_Call {
	return &MockLoader_Nest_Call{Call: _e.mock.On("Nest", message)}
}

func (_c *MockLoader_Nest_Call) Run(run func(message quicklog.Message)) *MockLoader_Nest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(quicklog.Message))
	})
	return _c
}

func (_c *MockLoader_Nest_Call) Return() *MockLoader_Nest_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLoader_Nest_Call) RunAndReturn(run func(quicklog.Message)) *MockLoader_Nest_Call {
	_c.Call.Return(run)
	return _c
}

// RunJSON provides a mock function with given fields:
func (_m *MockLoader) RunJSON() chan map[string]interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RunJSON")
	}

	var r0 chan map[string]interface{}
	if rf, ok := ret.Get(0).(func() chan map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan map[string]interface{})
		}
	}

	return r0
}

// MockLoader_RunJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunJSON'
type MockLoader_RunJSON_Call struct {
	*mock.Call
}

// RunJSON is a helper method to define mock.On call
func (_e *MockLoader_Expecter) RunJSON() *MockLoader_RunJSON_Call {
	return &MockLoader_RunJSON_Call{Call: _e.mock.On("RunJSON")}
}

func (_c *MockLoader_RunJSON_Call) Run(run func()) *MockLoader_RunJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLoader_RunJSON_Call) Return(_a0 chan map[string]interface{}) *MockLoader_RunJSON_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLoader_RunJSON_Call) RunAndReturn(run func() chan map[string]interface{}) *MockLoader_RunJSON_Call {
	_c.Call.Return(run)
	return _c
}

// RunTerminal provides a mock function with given fields: ci
func (_m *MockLoader) RunTerminal(ci bool) chan string {
	ret := _m.Called(ci)

	if len(ret) == 0 {
		panic("no return value specified for RunTerminal")
	}

	var r0 chan string
	if rf, ok := ret.Get(0).(func(bool) chan string); ok {
		r0 = rf(ci)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan string)
		}
	}

	return r0
}

// MockLoader_RunTerminal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunTerminal'
type MockLoader_RunTerminal_Call struct {
	*mock.Call
}

// RunTerminal is a helper method to define mock.On call
//   - ci bool
func (_e *MockLoader_Expecter) RunTerminal(ci interface{}) *MockLoader_RunTerminal_Call {
	return &MockLoader_RunTerminal_Call{Call: _e.mock.On("RunTerminal", ci)}
}

func (_c *MockLoader_RunTerminal_Call) Run(run func(ci bool)) *MockLoader_RunTerminal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *MockLoader_RunTerminal_Call) Return(_a0 chan string) *MockLoader_RunTerminal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLoader_RunTerminal_Call) RunAndReturn(run func(bool) chan string) *MockLoader_RunTerminal_Call {
	_c.Call.Return(run)
	return _c
}

// Success provides a mock function with given fields: step
func (_m *MockLoader) Success(step string) {
	_m.Called(step)
}

// MockLoader_Success_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Success'
type MockLoader_Success_Call struct {
	*mock.Call
}

// Success is a helper method to define mock.On call
//   - step string
func (_e *MockLoader_Expecter) Success(step interface{}) *MockLoader_Success_Call {
	return &MockLoader_Success_Call{Call: _e.mock.On("Success", step)}
}

func (_c *MockLoader_Success_Call) Run(run func(step string)) *MockLoader_Success_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockLoader_Success_Call) Return() *MockLoader_Success_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLoader_Success_Call) RunAndReturn(run func(string)) *MockLoader_Success_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: step
func (_m *MockLoader) Update(step string) {
	_m.Called(step)
}

// MockLoader_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockLoader_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - step string
func (_e *MockLoader_Expecter) Update(step interface{}) *MockLoader_Update_Call {
	return &MockLoader_Update_Call{Call: _e.mock.On("Update", step)}
}

func (_c *MockLoader_Update_Call) Run(run func(step string)) *MockLoader_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockLoader_Update_Call) Return() *MockLoader_Update_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLoader_Update_Call) RunAndReturn(run func(string)) *MockLoader_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLoader creates a new instance of MockLoader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLoader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLoader {
	mock := &MockLoader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
