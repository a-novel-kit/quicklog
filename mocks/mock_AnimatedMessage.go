// Code generated by mockery v2.46.0. DO NOT EDIT.

package quicklogmocks

import mock "github.com/stretchr/testify/mock"

// MockAnimatedMessage is an autogenerated mock type for the AnimatedMessage type
type MockAnimatedMessage struct {
	mock.Mock
}

type MockAnimatedMessage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAnimatedMessage) EXPECT() *MockAnimatedMessage_Expecter {
	return &MockAnimatedMessage_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockAnimatedMessage) Close() {
	_m.Called()
}

// MockAnimatedMessage_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockAnimatedMessage_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockAnimatedMessage_Expecter) Close() *MockAnimatedMessage_Close_Call {
	return &MockAnimatedMessage_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockAnimatedMessage_Close_Call) Run(run func()) *MockAnimatedMessage_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAnimatedMessage_Close_Call) Return() *MockAnimatedMessage_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAnimatedMessage_Close_Call) RunAndReturn(run func()) *MockAnimatedMessage_Close_Call {
	_c.Call.Return(run)
	return _c
}

// RunJSON provides a mock function with given fields:
func (_m *MockAnimatedMessage) RunJSON() <-chan map[string]interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RunJSON")
	}

	var r0 <-chan map[string]interface{}
	if rf, ok := ret.Get(0).(func() <-chan map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan map[string]interface{})
		}
	}

	return r0
}

// MockAnimatedMessage_RunJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunJSON'
type MockAnimatedMessage_RunJSON_Call struct {
	*mock.Call
}

// RunJSON is a helper method to define mock.On call
func (_e *MockAnimatedMessage_Expecter) RunJSON() *MockAnimatedMessage_RunJSON_Call {
	return &MockAnimatedMessage_RunJSON_Call{Call: _e.mock.On("RunJSON")}
}

func (_c *MockAnimatedMessage_RunJSON_Call) Run(run func()) *MockAnimatedMessage_RunJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAnimatedMessage_RunJSON_Call) Return(_a0 <-chan map[string]interface{}) *MockAnimatedMessage_RunJSON_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAnimatedMessage_RunJSON_Call) RunAndReturn(run func() <-chan map[string]interface{}) *MockAnimatedMessage_RunJSON_Call {
	_c.Call.Return(run)
	return _c
}

// RunTerminal provides a mock function with given fields: ci
func (_m *MockAnimatedMessage) RunTerminal(ci bool) <-chan string {
	ret := _m.Called(ci)

	if len(ret) == 0 {
		panic("no return value specified for RunTerminal")
	}

	var r0 <-chan string
	if rf, ok := ret.Get(0).(func(bool) <-chan string); ok {
		r0 = rf(ci)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan string)
		}
	}

	return r0
}

// MockAnimatedMessage_RunTerminal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunTerminal'
type MockAnimatedMessage_RunTerminal_Call struct {
	*mock.Call
}

// RunTerminal is a helper method to define mock.On call
//   - ci bool
func (_e *MockAnimatedMessage_Expecter) RunTerminal(ci interface{}) *MockAnimatedMessage_RunTerminal_Call {
	return &MockAnimatedMessage_RunTerminal_Call{Call: _e.mock.On("RunTerminal", ci)}
}

func (_c *MockAnimatedMessage_RunTerminal_Call) Run(run func(ci bool)) *MockAnimatedMessage_RunTerminal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *MockAnimatedMessage_RunTerminal_Call) Return(_a0 <-chan string) *MockAnimatedMessage_RunTerminal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAnimatedMessage_RunTerminal_Call) RunAndReturn(run func(bool) <-chan string) *MockAnimatedMessage_RunTerminal_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAnimatedMessage creates a new instance of MockAnimatedMessage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAnimatedMessage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAnimatedMessage {
	mock := &MockAnimatedMessage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
